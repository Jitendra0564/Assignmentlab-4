using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class SimpleStack<T>
{
    private T[] items;
    private int top;

    public SimpleStack(int capacity)
    {
        items = new T[capacity];
        top = -1;
    }

    public int Count
    {
        get { return top + 1; }
    }

    public bool IsEmpty
    {
        get { return top == -1; }
    }

    public void Push(T item)
    {
        if (top == items.Length - 1)
        {
            
            Array.Resize(ref items, items.Length * 2);
        }

        top++;
        items[top] = item;
    }

    public T Pop()
    {
        if (IsEmpty)
        {
            throw new Exception("Stack is empty.");
        }

        T poppedItem = items[top];
        top--;
        return poppedItem;
    }


    public T this[int index]
    {
        get
        {
            if (index < 0 || index > top)
            {
                throw new Exception("Index is out of range.");
            }

            return items[index];
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        SimpleStack<int> stack = new SimpleStack<int>(4);

        stack.Push(1);
        stack.Push(2);
        stack.Push(3);

        Console.WriteLine("Stack elements using indexer:");
        for (int i = 0; i < stack.Count; i++)
        {
            Console.WriteLine($"Index {i}: {stack[i]}");
        }

        Console.WriteLine("Popping elements from the stack:");
        while (!stack.IsEmpty)
        {
            Console.WriteLine($"Popped: {stack.Pop()}");
        }
        Console.Read();
    }
}

